generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  username        String    @unique
  name            String?
  bio             String?
  avatar          String?
  hashedPassword  String
  stellarAddress  String?   // Stellar wallet address
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  articles        Article[]
  highlights      Highlight[]
  tipsSent        Tip[]     @relation("TipsSent")
  tipsReceived    Tip[]     @relation("TipsReceived")
  earnings        AuthorEarnings?

  @@map("users")
}

model Article {
  id              String    @id @default(cuid())
  slug            String    @unique
  title           String
  content         Json      // TipTap JSON content
  excerpt         String?
  coverImage      String?
  published       Boolean   @default(false)
  publishedAt     DateTime?
  tags            Tag[]
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String
  highlights      Highlight[]
  tips            Tip[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([authorId])
  @@index([published, publishedAt])
  @@map("articles")
}

model Tag {
  id              String    @id @default(cuid())
  name            String    @unique
  slug            String    @unique
  articles        Article[]

  @@map("tags")
}

enum InteractionType {
  LIKE
  SHARE
  REPORT
}

model Highlight {
  id              String    @id @default(cuid())
  articleId       String
  article         Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Text selection data
  text            String    // The highlighted text content
  startOffset     Int       // Character offset from start
  endOffset       Int       // Character offset from end
  startNode       String    // CSS selector path for start node
  endNode         String    // CSS selector path for end node
  
  // Metadata
  color           String?   @default("#FFE0B2")
  isPublic        Boolean   @default(true)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Performance indexes
  @@index([articleId, userId])
  @@index([articleId, isPublic])
  @@map("highlights")
}

enum TipStatus {
  PENDING
  CONFIRMED
  FAILED
}

model Tip {
  id              String    @id @default(cuid())
  
  // Content reference
  articleId       String
  article         Article   @relation(fields: [articleId], references: [id])
  
  // Blockchain data (optional for POC)
  stellarTxId     String?   @unique
  contractTipId   String?   @unique
  
  // Tip details
  amountCents     Int       // Amount in cents
  amountStroops   String?   // Amount in stroops
  amountUsd       Decimal   // USD value at time of tip
  
  // Parties
  tipperId        String
  tipper          User      @relation("TipsSent", fields: [tipperId], references: [id])
  authorId        String
  author          User      @relation("TipsReceived", fields: [authorId], references: [id])
  
  // Status
  status          TipStatus @default(PENDING)
  platformFee     String?
  authorShare     String?
  
  createdAt       DateTime  @default(now())
  processedAt     DateTime?
  
  @@index([articleId])
  @@index([tipperId])
  @@index([authorId])
  @@index([stellarTxId])
  @@map("tips")
}

model AuthorEarnings {
  id              String    @id @default(cuid())
  authorId        String    @unique
  author          User      @relation(fields: [authorId], references: [id])
  
  // Earnings data
  totalTips       Int       @default(0)
  totalEarnedCents Int      @default(0) // In cents
  totalEarnedStroops String? @default("0") // In stroops
  totalEarnedUsd  Decimal   @default(0)
  
  // Pending withdrawal
  pendingAmountCents Int    @default(0)
  pendingAmountStroops String? @default("0")
  lastWithdrawal  DateTime?
  
  updatedAt       DateTime  @updatedAt
  
  @@map("author_earnings")
}